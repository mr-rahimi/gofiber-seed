package mongoRepositories

import (
    "context"
    "errors"
    "time"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/bson/primitive"
    "go.mongodb.org/mongo-driver/mongo"
    "{{getModuleName directoryName}}/domain/entities"
    "{{getModuleName directoryName}}/applications/deps/repositories"
)

type Mongo{{pascalCase moduleName}}Repository struct {
    collection *mongo.Collection
}

func NewMongo{{pascalCase moduleName}}Repository(database *mongo.Database) repositories.{{pascalCase moduleName}}Repository {
    return &Mongo{{pascalCase moduleName}}Repository{
        collection: database.Collection("{{snakeCase moduleName}}s"),
    }
}

func (r *Mongo{{pascalCase moduleName}}Repository) Create(ctx context.Context, {{camelCase moduleName}} *entities.{{pascalCase moduleName}}) (*entities.{{pascalCase moduleName}}, error) {
    if {{camelCase moduleName}}.ID == "" {
        {{camelCase moduleName}}.ID = primitive.NewObjectID().Hex()
    }
    
    {{camelCase moduleName}}.CreatedAt = time.Now()
    {{camelCase moduleName}}.UpdatedAt = time.Now()
    
    _, err := r.collection.InsertOne(ctx, {{camelCase moduleName}})
    if err != nil {
        return nil, err
    }
    
    return {{camelCase moduleName}}, nil
}

func (r *Mongo{{pascalCase moduleName}}Repository) GetByID(ctx context.Context, id string) (*entities.{{pascalCase moduleName}}, error) {
    var {{camelCase moduleName}} entities.{{pascalCase moduleName}}
    
    filter := bson.M{"_id": id}
    err := r.collection.FindOne(ctx, filter).Decode(&{{camelCase moduleName}})
    if err != nil {
        if err == mongo.ErrNoDocuments {
            return nil, errors.New("{{camelCase moduleName}} not found")
        }
        return nil, err
    }
    
    return &{{camelCase moduleName}}, nil
}

func (r *Mongo{{pascalCase moduleName}}Repository) List(ctx context.Context) ([]*entities.{{pascalCase moduleName}}, error) {
    cursor, err := r.collection.Find(ctx, bson.M{})
    if err != nil {
        return nil, err
    }
    defer cursor.Close(ctx)
    
    var {{camelCase moduleName}}s []*entities.{{pascalCase moduleName}}
    for cursor.Next(ctx) {
        var {{camelCase moduleName}} entities.{{pascalCase moduleName}}
        if err := cursor.Decode(&{{camelCase moduleName}}); err != nil {
            return nil, err
        }
        {{camelCase moduleName}}s = append({{camelCase moduleName}}s, &{{camelCase moduleName}})
    }
    
    return {{camelCase moduleName}}s, nil
}

func (r *Mongo{{pascalCase moduleName}}Repository) Update(ctx context.Context, {{camelCase moduleName}} *entities.{{pascalCase moduleName}}) (*entities.{{pascalCase moduleName}}, error) {
    {{camelCase moduleName}}.UpdatedAt = time.Now()
    filter := bson.M{"_id": {{camelCase moduleName}}.ID}
    update := bson.M{"$set": {{camelCase moduleName}} }
    
    result, err := r.collection.UpdateOne(ctx, filter, update)
    if err != nil {
        return nil, err
    }
    
    if result.MatchedCount == 0 {
        return nil, errors.New("{{camelCase moduleName}} not found")
    }
    
    return {{camelCase moduleName}}, nil
}

func (r *Mongo{{pascalCase moduleName}}Repository) Delete(ctx context.Context, id string) error {
    filter := bson.M{"_id": id}
    
    result, err := r.collection.DeleteOne(ctx, filter)
    if err != nil {
        return err
    }
    
    if result.DeletedCount == 0 {
        return errors.New("{{camelCase moduleName}} not found")
    }
    
    return nil
}
